import streamlit as st
import pandas as pd
import sqlite3
import pytesseract
from PIL import Image

# ---------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ----------
def init_db():
    conn = sqlite3.connect("members.db")
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS members (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            no TEXT,
            date TEXT,
            line_name TEXT,
            nickname TEXT,
            group_name TEXT,
            answer TEXT,
            no_answer TEXT,
            join_group7 TEXT,
            join_group8 TEXT,
            newbie TEXT,
            trade TEXT,
            note TEXT,
            reg1 TEXT,
            reg2 TEXT,
            reg3 TEXT
        )
    """)
    conn.commit()
    return conn

def insert_member(conn, row):
    conn.execute("""
        INSERT INTO members
        (no, date, line_name, nickname, group_name, answer, no_answer, join_group7, join_group8, newbie, trade, note, reg1, reg2, reg3)
        VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
    """, tuple(row))
    conn.commit()

def get_all_members(conn):
    return pd.read_sql("SELECT * FROM members", conn)

# ---------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Parse OCR ----------
def parse_table_from_text(text):
    lines = text.strip().split("\n")
    data = []
    for line in lines:
        parts = line.split("\t")  # ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÅ‡∏ó‡πá‡∏ö OCR
        if len(parts) >= 15:
            data.append(parts[:15])
    return pd.DataFrame(data, columns=[
        "‡∏•‡∏≥‡∏î‡∏±‡∏ö", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏•‡∏ô‡πå", "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô", "‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°",
        "‡∏ï‡∏≠‡∏ö", "‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö", "‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°7", "‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°8", "‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà",
        "‡πÄ‡∏ó‡∏£‡∏î‡∏´‡∏∏‡πâ‡∏ô", "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏", "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô1", "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô2", "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô3"
    ])

# ---------- ‡πÄ‡∏£‡∏¥‡πà‡∏° Streamlit ----------
st.set_page_config(page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", layout="wide")
st.title("üìã ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å")

conn = init_db()

menu = ["‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á", "‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•/‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"]
choice = st.sidebar.selectbox("‡πÄ‡∏°‡∏ô‡∏π", menu)

if choice == "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á":
    st.subheader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å")
    uploaded_file = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û", type=["png", "jpg", "jpeg"])

    if uploaded_file:
        image = Image.open(uploaded_file)
        text = pytesseract.image_to_string(image, lang="tha+eng")

        st.text_area("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà OCR ‡πÑ‡∏î‡πâ", text, height=200)

        df = parse_table_from_text(text)
        st.write("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û:")
        st.dataframe(df)

        if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"):
            for _, row in df.iterrows():
                insert_member(conn, row)
            st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‚úÖ")

elif choice == "‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•/‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤":
    st.subheader("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å")
    df = get_all_members(conn)

    keyword = st.text_input("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠, ‡πÑ‡∏•‡∏ô‡πå, ‡∏Å‡∏•‡∏∏‡πà‡∏°, ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà")
    if keyword:
        df = df[df.apply(lambda row: keyword.lower() in str(row).lower(), axis=1)]

    st.dataframe(df, use_container_width=True)
